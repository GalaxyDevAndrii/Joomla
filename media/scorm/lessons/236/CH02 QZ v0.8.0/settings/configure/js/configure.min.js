(function () {
    "use strict";

    angular.module('configure', [])
        .controller('ConfigureController', ['$scope', '$window', '$filter', ConfigureController]);

    function ConfigureController($scope, $window, $filter) {
        var that = $scope,
            currentSettings = null,
            api = window.egApi;

        that.isError = false;

        that.trackingData = (function () {
            var self = {};

            self.enableXAPI = true,
            self.allowToSkipTracking = false,
            self.lrsOptions = [
                {
                    key: 'default',
                    text: 'easygenerator (recommended)'
                },
                {
                    key: 'custom',
                    text: 'custom LRS'
                }
            ];
            self.reportsOptions = [
                {
                    key: 'lrs',
                    text: 'LRS'
                },
                {
                    key: 'webhoks',
                    text: 'Webhooks'
                }
            ];
            self.selectedLrs = self.lrsOptions[0].key;
            self.selectedReporting = self.reportsOptions[0].key;

            self.lrsOptions.forEach(function (lrsOption) {
                lrsOption.isSelected = function () {
                    return self.selectedLrs === lrsOption.key;
                };

                lrsOption.select = function () {
                    self.lrsOptions.forEach(function (item) {
                        item.isSelected(false);
                    });
                    lrsOption.isSelected(true);
                    self.selectedLrs = lrsOption.key;
                };
            });

            self.reportsOptions.forEach(function (reportOptions) {
                reportOptions.isSelected = function () {
                    return self.selectedReporting === reportOptions.key;
                };

                reportOptions.select = function () {
                    self.reportsOptions.forEach(function (item) {
                        item.isSelected(false);
                    });
                    reportOptions.isSelected(true);
                    self.selectedReporting = reportOptions.key;
                };
            });

            self.customLrsEnabled = customLrsEnabled;

            self.lrsUrl = '';
            self.authenticationRequired = false;
            self.lapLogin = '';
            self.lapPassword = '';
            self.credentialsEnabled = credentialsEnabled;

            self.statements = {
                started: true,
                stopped: true,
                experienced: true,
                mastered: true,
                answered: true,
                passed: true,
                failed: true
            };

            self.advancedSettingsExpanded = false;
            self.toggleAdvancedSettings = toggleAdvancedSettings;

            self.init = init;
            self.getData = getData;

            return self;

            function customLrsEnabled() {
                return self.enableXAPI && self.selectedLrs !== self.lrsOptions[0].key;
            }

            function credentialsEnabled() {
                return self.customLrsEnabled() && self.authenticationRequired;
            }

            function toggleAdvancedSettings() {
                self.advancedSettingsExpanded = !self.advancedSettingsExpanded;
            }

            function init(xApiSettings) {
                self.enableXAPI = xApiSettings.enabled || false;
                self.allowToSkipTracking = !xApiSettings.required;
                var defaultLrs = xApiSettings.enabled ? 'custom' : 'default';
                self.selectedLrs = xApiSettings.selectedLrs || defaultLrs;
                self.lrsUrl = xApiSettings.lrs.uri || '';
                self.authenticationRequired = xApiSettings.lrs.authenticationRequired || false;
                self.lapLogin = xApiSettings.lrs.credentials.username || '';
                self.lapPassword = xApiSettings.lrs.credentials.password || '';

                var key;
                if (xApiSettings.allowedVerbs) {
                    for (key in self.statements) {
                        if (self.statements.hasOwnProperty(key)) {
                            self.statements[key] = ~xApiSettings.allowedVerbs.indexOf(key);
                        }
                    }
                }
            }

            function getData() {
                return {
                    enabled: self.enableXAPI,
                    required: !self.allowToSkipTracking,
                    selectedLrs: self.selectedLrs,
                    lrs: {
                        uri: self.lrsUrl,
                        authenticationRequired: self.authenticationRequired,
                        credentials: {
                            username: self.lapLogin,
                            password: self.lapPassword
                        }
                    },
                    allowedVerbs: $.map(self.statements, function (value, key) {
                        return value ? key : undefined;
                    })
                };
            }
        })();

        that.webhooks = (function () {
            var self = {};
            var statuses = {
                notChecked: 'notChecked',
                success: 'success',
                error: 'error'
            };
            var _requestCheckData = {
                courseId: "courseId",
                learnerId: "example@example.com",
                score: 75,
                finishedOn: (new Date()).toISOString(),
                status: "passed"
            };

            self.url = '';
            self.isChecking = false;
            self.checkStatus = statuses.notChecked;
            self.statuses = statuses;

            self.init = init;
            self.getData = getData;
            self.checkUrl = checkUrl;

            return self;

            function init(webhooksSettings) {
                if (!webhooksSettings && !webhooksSettings.url) {
                    return;
                }
                
                self.url = webhooksSettings.url;
            }

            function checkUrl() {
                self.isChecking = true;
                            
                $.ajax({
                    url: self.url,
                    type: 'POST',
                    cache: false,
                    contentType: 'application/json',
                    data: JSON.stringify(_requestCheckData)
                })
                .done(function () {
                    self.checkStatus = statuses.success;
                })
                .fail(function() {
                    self.checkStatus = statuses.error;
                })
                .always(function() {
                    self.isChecking = false;
                    $scope.$apply() // fix dom updating (it not update if properties updates very quick)
                });
            }
                
            function getData() {
                return {
                    url: self.url
                }
            }
        })();

        that.masteryScore = (function () {
            var self = {};

            self.value = 0;

            self.init = init;
            self.getData = getData;

            return self;

            function init(masteryScoreSettings) {
                if (masteryScoreSettings && masteryScoreSettings.score >= 0 && masteryScoreSettings.score <= 100) {
                    self.value = masteryScoreSettings.score;
                } else {
                    self.value = 100;
                }
            }

            function getData() {
                return {
                    score: self.value || 0
                };
            }
        })();

        that.languages = (function () {
            var self = {},
                defaultLanguageCode = 'en',
                customLanguageCode = 'xx';

            self.languagesList = [];

            self.selectedLanguageCode = '';
            self.selectedLanguage = null;

            self.getCustomTranslations = getCustomTranslations;

            self.init = init;
            self.getData = getData;

            that.$watch('languages.selectedLanguageCode', function () {
                var language = _getLanguage(self.selectedLanguageCode);

                if (!language) {
                    return;
                }

                language.load().then(function () {
                    self.selectedLanguage = language;
                    that.$applyAsync();
                });
            });

            return self;

            function getCustomTranslations() {
                var customLanguage = _getLanguage(customLanguageCode);
                return customLanguage ? customLanguage.resources : {};
            }

            function init(languages, languagesSettings) {
                languages.forEach(function (language) {
                    self.languagesList.push(new Language(language.code, language.name, language.url, false));
                });

                orderLanguages();

                var defaultLanguage = _getLanguage(defaultLanguageCode);
                var customLanguage = new Language(customLanguageCode, 'Custom', defaultLanguage ? defaultLanguage.resourcesUrl : null, true, languagesSettings ? languagesSettings.customTranslations : null);

                self.languagesList.push(customLanguage);

                self.selectedLanguageCode = (languagesSettings && languagesSettings.selected) ? languagesSettings.selected : defaultLanguageCode;
            }

            function orderLanguages() {
                self.languagesList.sort(function (a, b) {
                    return a.name.localeCompare(b.name);
                });
            }

            function getData() {
                return {
                    selected: self.selectedLanguageCode,
                    customTranslations: self.getCustomTranslations()
                };
            }

            function _getLanguage(code) {
                return $filter('filter')(self.languagesList, { code: code })[0];
            }

            function Language(code, name, resourcesUrl, isEditable, userTranslations) {
                var _isLoaded = false;

                var that = this;

                that.code = code;
                that.name = name;
                that.isEditable = isEditable;
                that.resourcesUrl = resourcesUrl;
                that.resources = userTranslations || {};

                that.load = load;

                function load() {
                    if (_isLoaded) {
                        return $.when();
                    }

                    return loadLanguageResources(that.resourcesUrl).then(function (resources) {
                        that.resources = $.isEmptyObject(that.resources) ? resources : extend(that.resources, resources);
                        _isLoaded = true;
                    });
                }

                function extend(source, defaults) {
                    var extendedList = {};
                    $.each(defaults, function (key, value) {
                        extendedList[key] = typeof source[key] == "string" ? source[key] : value;
                    });
                    return extendedList;
                }

                function loadLanguageResources(url) {
                    return $.ajax({
                        url: url,
                        dataType: 'json',
                        contentType: 'application/json'
                    });
                }
            }

        })();

        that.timer = (function () {
            var self = {};

            self.enabled = false;
            self.hours = 0;
            self.minutes = 30;
            self.seconds = 0;

            self.init = init;
            self.getData = getData;

            return self;

            function init(timerSettings) {
                if (!timerSettings || !timerSettings.time) {
                    return;
                }

                self.enabled = timerSettings.enabled;

                self.hours = timerSettings.time.hours;
                self.minutes = timerSettings.time.minutes;
                self.seconds = timerSettings.time.seconds;
            }

            function getData() {
                return {
                    enabled: self.enabled,
                    time: {
                        hours: self.hours,
                        minutes: self.minutes,
                        seconds: self.seconds
                    }
                };
            }
        })();

        that.questionPool = (function () {
            var self = {};

            self.modes = {
                all: 'all',
                subset: 'subset'
            };
            self.mode = self.modes.all;

            self.subsetSize = 10;
            self.randomizeOrder = true;
            self.randomizePerAttempt = false;

            self.init = init;
            self.getData = getData;

            return self;

            function init(questionPoolSettings) {
                if (!questionPoolSettings) {
                    return;
                }

                self.mode = questionPoolSettings.mode;
                self.subsetSize = questionPoolSettings.subsetSize;
                self.randomizeOrder = questionPoolSettings.randomizeOrder;
                self.randomizePerAttempt = questionPoolSettings.randomizePerAttempt;
            }

            function getData() {
                var resultData = {};

                resultData.mode = self.mode;
                resultData.subsetSize = self.subsetSize;

                if (self.mode === self.modes.all) {
                    resultData.randomizeOrder = self.randomizeOrder;
                    resultData.randomizePerAttempt = self.randomizeOrder && self.randomizePerAttempt;
                } else if (self.mode === self.modes.subset) {
                    resultData.randomizeOrder = true;
                    resultData.randomizePerAttempt = self.randomizePerAttempt;
                }

                return resultData;
            }
        })();

        that.answers = (function () {
            var self = {
                randomize: false,
                init: init,
                getData: getData
            };

            return self;

            function init(answersSettings) {
                if (!answersSettings)
                    return;

                self.randomize = answersSettings.randomize;
            }

            function getData() {
                return {
                    randomize: self.randomize
                };
            }
        })();

        that.attempt = (function () {
            var self = {
                hasLimit: false,
                limit: 3,
                init: init,
                getData: getData
            };

            return self;

            function init(attemptsSettings) {
                if (!attemptsSettings)
                    return;

                self.hasLimit = attemptsSettings.hasLimit;
                self.limit = attemptsSettings.limit;
            }

            function getData() {
                return {
                    hasLimit: self.hasLimit,
                    limit: self.limit
                };
            }
        })();

        that.assessmentMode = (function () {
            var self = {
                init: init,
                getData: getData
            };
            self.modes = {
                quiz: 'quiz',
                exam: 'exam'
            };
            self.mode = self.modes.quiz;
            self.attemptsSettings = {
                quiz: {
                    hasLimit: true,
                    limit: 3
                },
                exam: {
                    hasLimit: true,
                    limit: 1
                }
            };

            return self;

            function init(assessmentMode) {
                if (!assessmentMode) {
                    return;
                }

                self.mode = assessmentMode;
            }

            function getData() {
                return self.mode;
            }
        })();

        that.showGivenAnswers = (function () {
            var self = {
                value: true,
                init: init,
                getData: getData
            };

            return self;

            function init(showLearnersGivenAnswers) {
                if (showLearnersGivenAnswers === undefined) {
                    return;
                }

                self.value = showLearnersGivenAnswers;
            }

            function getData() {
                return self.value;
            }

        })();

        function saveChanges() {
            var newSettings = getCurrentSettings();
            if (angular.equals(currentSettings, newSettings)) {
                return;
            }

            var stingOfSettings = JSON.stringify(newSettings);
            api.saveSettings(stingOfSettings).done(function () {
                currentSettings = JSON.parse(stingOfSettings);
            });
        };

        that.showResultTracking = (function () {

          var self = {
            value: true,
            init: init,
            getData: getData
          };

          return self;

          function init(showResultTracking) {
              if (showResultTracking === undefined) {
                  self.value = true;
                  return;
              }

              self.value = showResultTracking;
          }

          function getData() {
              return self.value;
          }

        })();

        that.showAllowToSkipTracking = (function () {

            var self = {
              value: true,
              init: init,
              getData: getData
            };
  
            return self;
  
            function init(showAllowToSkipTracking) {
                if (showAllowToSkipTracking === undefined) {
                    self.value = true;
                    return;
                }
  
                self.value = showAllowToSkipTracking;
            }
  
            function getData() {
                return self.value;
            }
  
          })();

          that.showTrackAndTraceSettings = (function () {

            var self = {
              value: true,
              init: init,
              getData: getData
            };
  
            return self;
  
            function init(showTrackAndTraceSettings) {
                if (showTrackAndTraceSettings === undefined) {
                    self.value = true;
                    return;
                }
  
                self.value = showTrackAndTraceSettings;
            }
  
            function getData() {
                return self.value;
            }
  
          })();

          that.showLanguageSettings = (function () {

            var self = {
              value: true,
              init: init,
              getData: getData
            };
  
            return self;
  
            function init(showLanguageSettings) {
                if (showLanguageSettings === undefined) {
                    self.value = true;
                    return;
                }
  
                self.value = showLanguageSettings;
            }
  
            function getData() {
                return self.value;
            }
  
          })();

        function getCurrentSettings(settings) {
            return $.extend({}, settings || currentSettings, {
                xApi: that.trackingData.getData(),
                webhooks: that.webhooks.getData(),
                masteryScore: that.masteryScore.getData(),
                languages: that.languages.getData(),
                timer: that.timer.getData(),
                questionPool: that.questionPool.getData(),
                attempt: that.attempt.getData(),
                assessmentMode: that.assessmentMode.getData(),
                showResultTracking: that.showResultTracking.getData(),
                showAllowToSkipTracking: that.showAllowToSkipTracking.getData(),
                showTrackAndTraceSettings: that.showTrackAndTraceSettings.getData(),
                showLanguageSettings: that.showLanguageSettings.getData(),
                answers: that.answers.getData(),
                showGivenAnswers: that.showGivenAnswers.getData()
            });
        }
		
		function getXapiSettings(defaultXapi, currentXapi){
			var clone = $.extend({}, defaultXapi);
			delete clone.allowedVerbs;
			
			return $.extend(true, {}, clone, currentXapi);
		}
		

        //#region Initialization

        return api.init().then(function () {
            var manifest = api.getManifest(),
                settings = api.getSettings(),
                defaultSettings = manifest.defaultTemplateSettings;

            that.trackingData.init(getXapiSettings(defaultSettings.xApi, settings.xApi));
            that.webhooks.init(settings.webhooks || defaultSettings.webhooks);
            that.masteryScore.init(settings.masteryScore || defaultSettings.masteryScore);
            that.languages.init(manifest.languages, $.extend(true, {}, defaultSettings.languages, settings.languages));
            that.timer.init($.extend(true, {}, defaultSettings.timer, settings.timer));
            that.questionPool.init($.extend(true, {}, defaultSettings.questionPool, settings.questionPool));
            that.answers.init($.extend(true, {}, defaultSettings.answers, settings.answers));
            that.attempt.init($.extend(true, {}, defaultSettings.attempt, settings.attempt));
            that.assessmentMode.init(settings.assessmentMode || defaultSettings.assessmentMode);
            that.showResultTracking.init(typeof settings.showResultTracking === 'boolean' ? settings.showResultTracking : defaultSettings.showResultTracking);
            that.showAllowToSkipTracking.init(typeof settings.showAllowToSkipTracking === 'boolean' ? settings.showAllowToSkipTracking : defaultSettings.showAllowToSkipTracking);
            that.showTrackAndTraceSettings.init(typeof settings.showTrackAndTraceSettings === 'boolean' ? settings.showTrackAndTraceSettings : defaultSettings.showTrackAndTraceSettings);
            that.showLanguageSettings.init(typeof settings.showLanguageSettings === 'boolean' ? settings.showLanguageSettings : defaultSettings.showLanguageSettings);
            that.showGivenAnswers.init(typeof settings.showGivenAnswers === 'boolean' ? settings.showGivenAnswers : defaultSettings.showGivenAnswers);

            currentSettings = getCurrentSettings($.extend(true, {}, defaultSettings, settings));

            $scope.$watch('assessmentMode.mode', function (mode, prevMode) {
                that.assessmentMode.attemptsSettings[prevMode] = that.attempt.getData();
                that.attempt.init(that.assessmentMode.attemptsSettings[mode]);
            });

            angular.element($window).on('blur', saveChanges);
        }).fail(function () {
            that.isError = true;
        }).always(function () {
            that.$applyAsync();
            api.showSettings();
        });

        //#endregion Initialization
    }

})();
(function () {
    "use strict";

    angular.module('configure')
        .directive('tabs', tabs)
        .directive('switchToggle', switchToggle)
        .directive('disableDragAndDrop', disableDragAndDrop)
        .directive('spinner', spinner)
        .directive('number', number)
        .directive('dropdown', dropdown)
        .filter('keys', keys);

    function tabs() {
        return {
            restrict: 'A',
            link: function (scope, element) {
                var $element = $(element),
                    dataTabLink = 'data-tab-link',
                    dataTab = 'data-tab',
                    activeClass = 'active',
                    $tabLinks = $element.find('[' + dataTabLink + ']'),
                    $tabs = $element.find('[' + dataTab + ']');

                $tabs.hide();

                $tabLinks.first().addClass(activeClass);
                $tabs.first().show();

                $tabLinks.each(function (index, item) {
                    var $item = $(item);
                    $item.on('click', function () {
                        var key = $item.attr(dataTabLink),
                            currentContentTab = $element.find('[' + dataTab + '="' + key + '"]');
                        $tabLinks.removeClass(activeClass);
                        $item.addClass(activeClass);
                        $tabs.hide();
                        currentContentTab.show();
                    });
                });
            }
        };
    }

    function switchToggle() {
        return {
            restrict: 'A',
            scope: {
                toggleValue: '='
            },
            link: function (scope, element) {
                var $element = $(element),
                    viewModel = initViewModel();

                viewModel.setInitialValue(scope.toggleValue);

                scope.$watch('toggleValue', function (value) {
                    viewModel.updateValue(value);
                });

                onClick(function () {
                    viewModel.toggle();
                    scope.toggleValue = !scope.toggleValue;
                    scope.$apply();
                });

                function initViewModel() {
                    var $wrapper = $('.switch-toggle-wrapper', $element);

                    function setInitialValue(value) {
                        setElementValue(value);
                        updateElementPosition(value);
                    }

                    function toggle() {
                        var value = getValue();
                        setElementValue(!value);

                        $wrapper.stop().animate({
                            marginLeft: calculateElementLeftMargin(!value)
                        }, 250);
                    }

                    function getValue() {
                        return $element.hasClass('on');
                    }

                    function updateValue(value) {
                        if (getValue() !== value) {
                            setInitialValue(value);
                        }
                    }

                    function setElementValue(value) {
                        $element.toggleClass('on', value);
                        $element.toggleClass('off', !value);
                    }

                    function updateElementPosition(value) {
                        $wrapper.css('margin-left', calculateElementLeftMargin(value) + 'px');
                    }

                    function calculateElementLeftMargin(value) {
                        return value ? 0 : $element.height() - $element.width();
                    }

                    return {
                        setInitialValue: setInitialValue,
                        updateValue: updateValue,
                        toggle: toggle
                    };
                }

                function onClick(handler) {
                    var isMouseDownFired = false;

                    $element.mousedown(function (event) {
                        if (event.which !== 1) {
                            return;
                        }

                        isMouseDownFired = true;
                        handler();
                    });

                    $element.click(function () {
                        if (isMouseDownFired) {
                            isMouseDownFired = false;
                            return;
                        }

                        handler();
                    });
                }
            }
        };
    }

    function disableDragAndDrop() {
        return {
            restrict: 'A',
            link: function (scope, element) {
                $(element).on('dragstart', function (event) {
                    event.preventDefault();
                });
            }
        };
    }

    function spinner() {
        return {
            restrict: 'A',
            scope: {
                spinnerValue: '='
            },
            link: function (scope, element) {
                $(element)
                    .spinner('changing', function (e, newValue) {
                        scope.spinnerValue = newValue;
                        scope.$apply();
                    });
            }
        };
    }

    function number() {
        return {
            restrict: 'A',
            scope: {
                numberValue: '='
            },
            link: function (scope, element) {
                var $element = $(element),
                    maxValue = 100;

                $element.on('keydown', function (e) {
                    var key = e.charCode || e.keyCode || 0;
                    return (key === 8 || key === 9 || key === 46 || (key >= 37 && key <= 40) ||
                        (key >= 48 && key <= 57) || (key >= 96 && key <= 105));
                });
                $element.on('keyup', function () {
                    if (scope.numberValue > maxValue) {
                        scope.numberValue = maxValue;
                        scope.$apply();
                    }
                });
            }
        };
    }

    function dropdown() {
        return {
            restrict: 'E',
            scope: {
                options: '=',
                value: '=',
                optionsValue: '=',
                optionsText: '='
            },
            link: function (scope, $element) {
                var cssClasses = {
                    dropdown: 'dropdown',
                    disabled: 'disabled',
                    expanded: 'expanded',
                    optionsList: 'dropdown-options-list',
                    optionItem: 'dropdown-options-item',
                    currentItem: 'dropdown-current-item',
                    currentItemText: 'dropdown-current-item-text',
                    indicatorHolder: 'dropdown-indicator-holder',
                    indicator: 'dropdown-indicator'
                };

                $element.addClass(cssClasses.dropdown);

                var $currentItemElement = $('<div />')
                    .addClass(cssClasses.currentItem)
                    .appendTo($element);

                $('<div />')
                    .addClass(cssClasses.currentItemText)
                    .appendTo($currentItemElement);

                var $indicatorHolder = $('<div />')
                    .addClass(cssClasses.indicatorHolder)
                    .appendTo($currentItemElement);

                $('<span />')
                    .addClass(cssClasses.indicator)
                    .appendTo($indicatorHolder);

                $('<ul />')
                    .addClass(cssClasses.optionsList)
                    .appendTo($element);

                $currentItemElement.on('click', function (e) {
                    if ($element.hasClass(cssClasses.disabled)) {
                        return;
                    }

                    $currentItemElement.toggleClass(cssClasses.expanded);
                    e.stopPropagation();
                });

                var collapseHandler = function () {
                    $currentItemElement.removeClass(cssClasses.expanded);
                };

                $('html').bind('click', collapseHandler);
                $(window).bind('blur', collapseHandler);

                scope.$watchGroup(['options', 'value'], function (values) {
                    var $optionsListElement = $element.find('ul.' + cssClasses.optionsList),
                        $currentItemTextElement = $element.find('div.' + cssClasses.currentItemText);

                    var options = values[0],
                        value = values[1],
                        optionsText = scope.optionsText,
                        optionsValue = scope.optionsValue;

                    $optionsListElement.empty();

                    $.each(options, function (index, option) {
                        if (option[optionsValue] == value) {
                            $currentItemTextElement.text(option[optionsText]);
                            return;
                        }

                        $('<li />')
                            .addClass(cssClasses.optionItem)
                            .appendTo($optionsListElement)
                            .text(option[optionsText])
                            .on('click', function (e) {
                                scope.value = option[optionsValue];
                                scope.$apply();
                            });
                    });
                });
            }
        };
    }

    function keys() {
        return function(input) {
            if (!input) {
                return [];
            }
            return Object.keys(input);
        };
    }

})();