{"version":3,"sources":["components/login/Input/Input.styled.ts","components/login/Input/Input.tsx","components/login/Input/index.ts","components/review/LoginForm/LoginForm.styled.ts","components/review/LoginForm/LoginForm.tsx","components/review/CommentForm/CommentForm.styled.ts","components/review/CommentForm/CommentForm.tsx","components/review/ReviewForm/ReviewForm.styled.ts","components/review/ReviewForm/ReviewForm.tsx","components/review/ReviewSpot/ReviewSpot.styled.ts","components/review/ReviewSpot/ReviewSpot.tsx","components/review/ReviewSpot/index.ts"],"names":["InputElement","styled","input","attrs","props","type","name","placeholder","tabIndex","id","onInvalid","autoComplete","pattern","required","secondaryFont","transparentize","theme","colors","textColor","mainColor","contentBodyColor","media","mobile","isBlur","css","incorrectColor","bounce","correctColor","validationStatusBeforeSubmit","InputLabel","label","transition","ValidIcon","Icon","ValidationMessageBlock","div","TextError","Text","EyeIcon","role","ariaLabel","buttonDefaultStyle","InputContainer","isUserExist","Input","validationPassword","event","onChange","isSpaceInPass","test","target","value","isPatternPass","RegExp","setState","startInputPass","showErrorText","state","validValue","hasValue","showPassword","showPassValidationBlock","this","defaultValue","onBlur","classList","remove","validity","typeMismatch","patternMismatch","length","INPUT_TYPE","TEXT","PASSWORD","idInput","labelText","validIcon","textError","refInput","showValidationMessage","onFocus","ref","setTypePassword","className","onBlurValidationInput","onInputFocus","htmlFor","size","localize","onClick","showHidePassword","onKeyDown","KEYS","ENTER","toLowerCase","SPACEBAR","includes","key","preventDefault","React","defaultProps","withTheme","FormTitle","h3","reviewFontText","LoginFormContainer","LoginInput","LoginInputWrapper","LoginForm","email","getRefs","node","EMAIL","CommentFormContainer","CommentTextarea","textarea","validComment","localizationKeys","REVIEW_COMMENT_PROPERTIES","DEFAULT_TITLE","TITLE","INTRODUCTION","LEARNING_CONTENT","QUESTION","VOICE_OVER","CONTENT_ITEM","TITLE_OF_THE_SECTION","GENERAL","CommentForm","commentText","isValidComment","context","isGeneral","title","property","REVIEW_COMMENT_TYPES","INFORMATION_CONTENT","COURSE","SECTION","getLocalizationKey","FormWrapper","form","SubmitIcon","FormContent","FormActions","FormSubmitButton","button","FormCancelButton","SuccessMessageIcon","centerAbsoluteElementY","ErrorMessageIcon","SuccessMessage","crossFade","ErrorMessage","ReviewForm","loginRefs","getReviewerEmailAndName","a","async","eventEmitter","emit","events","REVIEW_RESTORE_USER","response","beforeSubmitValidation","nameValid","valid","emailValid","checkInputValidation","showLoginForm","element","validateComment","requestSending","isValidBeforeSubmit","trim","sendComment","REVIEWER_AUTHORIZED","data","text","showSuccessMessage","showErrorMessage","COMMENT_SENT","STATUS_OK","COMMENT_SENDING_FAILED","activeElem","document","activeElement","getAttribute","setTimeout","focus","closePopover","disabled","CommentIcon","ToggleButtonText","span","ToggleButton","isActive","ReviewWrapper","isVoiceOver","small","large","ReviewSpot","toggle","isExpanded","closePopup","hintName","Hint","position","hintElements","trigger","open","onRequestClose","arrow","interactive","tooltipTheme","html","ariaModal"],"mappings":"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","file":"static/js/9.017a60b4.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport { transition, bounce } from 'components/mixins/interactivity';\nimport { transparentize } from 'utils/color';\nimport media from 'components/mixins/media';\nimport Icon from 'components/common/Icon';\nimport Text from 'components/common/Text';\nimport buttonDefaultStyle from 'components/mixins/normalize';\nimport { secondaryFont } from 'components/mixins/typography';\n\ntype InputElement = {\n  type: string;\n  name: string;\n  placeholder: string;\n  tabIndex: number;\n  id: string;\n  onInvalid(): void;\n  autoComplete: string;\n  pattern?: string;\n  validationStatusBeforeSubmit: boolean;\n  isBlur: boolean;\n};\nexport const InputElement = styled.input.attrs((props: InputElement) => ({\n  type: props.type,\n  name: props.name,\n  placeholder: props.placeholder,\n  tabIndex: props.tabIndex,\n  id: props.id,\n  onInvalid: props.onInvalid,\n  autoComplete: props.autoComplete,\n  pattern: props.pattern,\n  required: 'required'\n}))<InputElement>`\n  ${secondaryFont};\n  position: relative;\n  top: 0;\n  left: 0;\n  border-radius: 30px;\n  font-weight: normal;\n  font-size: 14px;\n  width: 320px;\n  height: 50px;\n  border-radius: 30px;\n  box-shadow: inset 0 2px 0 0 ${props => transparentize(props.theme.colors.textColor, 0.08)};\n  background-color: ${props => transparentize(props.theme.colors.textColor, 0.02)};\n  padding: 16px 40px 16px 24px;\n  border: none;\n  color: ${props => props.theme.colors.textColor};\n  &::placeholder {\n    color: transparent;\n  }\n  &:focus {\n    box-shadow: inset 0 2px 0 0 ${props => transparentize(props.theme.colors.mainColor, 0.1)};\n    border: solid 1px ${props => props.theme.colors.mainColor};\n    background-color: ${props => props.theme.colors.contentBodyColor};\n    outline: none;\n  }\n  &:focus::placeholder {\n    color: ${props => transparentize(props.theme.colors.textColor, 0.7)};\n  }\n  ${media.mobile`\n    width: 260px;\n    height: 44px;\n  `};\n  &.full:invalid {\n    ${props =>\n      props.isBlur === true &&\n      css`\n        background-color: ${props => transparentize(props.theme.colors.textColor, 0.02)};\n        box-shadow: inset 0 2px 0 0\n          ${props => transparentize(props.theme.colors.incorrectColor, 0.06)};\n        border: solid 1px ${props => props.theme.colors.incorrectColor};\n        ${bounce};\n      `};\n  }\n  &.full:valid {\n    ${props =>\n      props.isBlur === true &&\n      css`\n        background-color: ${props => props.theme.colors.contentBodyColor};\n        box-shadow: inset 0 2px 0 0\n          ${props => transparentize(props.theme.colors.incorrectColor, 0.1)};\n        border: solid 1px ${props => props.theme.colors.correctColor};\n      `};\n  }\n  ${props =>\n    props.validationStatusBeforeSubmit === false &&\n    css`\n      & {\n        background-color: ${transparentize(props.theme.colors.textColor, 0.02)};\n        box-shadow: inset 0 2px 0 0 ${transparentize(props.theme.colors.incorrectColor, 0.06)};\n        border: solid 1px ${props.theme.colors.incorrectColor};\n        ${bounce};\n      }\n    `};\n`;\n\nexport const InputLabel = styled.label`\n  box-sizing: border-box;\n  line-height: 1;\n  position: absolute;\n  padding: 16px 24px;\n  top: -30px;\n  left: 0;\n  font-size: 10px;\n  color: ${props => transparentize(props.theme.colors.textColor, 0.7)};\n  ${InputElement}.is-empty + & {\n    top: 0;\n    font-size: 14px;\n  }\n  ${transition('top')};\n  ${InputElement}.changed + &,\n  ${InputElement}:focus + &,\n  ${InputElement}:valid + & {\n    top: -30px;\n    font-size: 10px;\n  }\n\n  ${InputElement}:-webkit-autofill + &{\n    top: -30px;\n    font-size: 10px;\n  }\n`;\n\nexport const ValidIcon = styled(Icon)`\n  color: ${props => props.theme.colors.correctColor};\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 22px;\n  visibility: hidden;\n  ${InputElement}:invalid ~ & {\n    ${props =>\n      props.isBlur === true &&\n      css`\n        visibility: hidden;\n      `};\n  }\n  ${InputElement}:valid ~ & {\n    ${props =>\n      props.isBlur === true &&\n      css`\n        visibility: visible;\n      `};\n  }\n`;\n\nexport const ValidationMessageBlock = styled.div`\n  display: flex;\n  position: absolute;\n  left: 25px;\n  top: 55px;\n  visibility: hidden;\n  &.show {\n    visibility: visible;\n  }\n`;\n\nexport const TextError = styled<any>(Text)`\n  && {\n    color: ${props => props.theme.colors.incorrectColor};\n    position: relative;\n    font-size: 10px;\n    visibility: hidden;\n    margin-right: 10px;\n    line-height: 1;\n    ${ValidationMessageBlock}.show & {\n      visibility: visible;\n      color: ${props => transparentize(props.theme.colors.textColor, 0.5)};\n      margin-right: 15px;\n    }\n    ${ValidationMessageBlock}.show & .icon {\n      color: ${props => transparentize(props.theme.colors.textColor, 0.5)};\n      margin-right: 5px;\n    }\n    & .icon {\n      color: ${props => props.theme.colors.incorrectColor};\n    }\n    &.active {\n      visibility: visible;\n    }\n    ${ValidationMessageBlock}.show &.valid, ${ValidationMessageBlock}.show &.valid .icon {\n      color: ${props => props.theme.colors.correctColor};\n    }\n    ${ValidationMessageBlock}.show &.invalid, ${ValidationMessageBlock}.show &.invalid .icon {\n      color: ${props => props.theme.colors.incorrectColor};\n    }\n  }\n`;\n\ntype EyeIconProps = {\n  role: string;\n  tabIndex: number;\n  ariaLabel?: string;\n  name: string;\n  onClick: any;\n  onKeyDown: any;\n};\nexport const EyeIcon = styled(Icon).attrs((props: EyeIconProps) => ({\n  role: props.role,\n  tabIndex: props.tabIndex,\n  'aria-label': props.ariaLabel\n}))<EyeIconProps>`\n  ${buttonDefaultStyle};\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 20px;\n  color: ${props => transparentize(props.theme.colors.textColor, 0.7)};\n  font-size: 11px;\n  cursor: pointer;\n  &.icon-eye-close {\n    font-size: 13px;\n  }\n  &:hover {\n    color: ${props => props.theme.colors.textColor};\n  }\n  &:focus {\n    color: ${props => props.theme.colors.textColor};\n    outline: 1px solid black;\n  }\n  &:focus:not(:focus-visible) {\n    color: ${props => props.theme.colors.textColor};\n    outline: none;\n  }\n`;\n\ntype InputContainerProps = {\n  isUserExist: boolean;\n};\nexport const InputContainer = styled.div<InputContainerProps>`\n  ${secondaryFont};\n  position: relative;\n  font-weight: normal;\n  font-size: 14px;\n  &.invalid-input ${InputElement} {\n    background-color: ${props => transparentize(props.theme.colors.textColor, 0.02)};\n    box-shadow: inset 0 2px 0 0 ${props => transparentize(props.theme.colors.incorrectColor, 0.06)};\n    border: solid 1px ${props => props.theme.colors.incorrectColor};\n    ${bounce};\n  }\n  ${props =>\n    props.isUserExist === true &&\n    css`\n      ${InputElement}.full:valid {\n        background-color: ${transparentize(props.theme.colors.textColor, 0.02)};\n        box-shadow: inset 0 2px 0 0 ${transparentize(props.theme.colors.incorrectColor, 0.06)};\n        border: solid 1px ${props.theme.colors.incorrectColor};\n        ${bounce};\n      }\n      ${InputElement}:valid ~ ${ValidIcon} {\n        visibility: hidden;\n      }\n      ${TextError} {\n        visibility: visible;\n      }\n      ${ValidationMessageBlock} {\n        visibility: visible;\n      }\n    `};\n`;\n","import * as React from 'react';\nimport { withTheme } from 'styled-components';\nimport { INPUT_TYPE } from 'constants/components';\nimport { localize } from 'core/localization';\nimport Icon from 'components/common/Icon';\nimport { KEYS } from 'constants/common';\n\nimport {\n  InputContainer,\n  InputElement,\n  InputLabel,\n  ValidIcon,\n  TextError,\n  ValidationMessageBlock,\n  EyeIcon\n} from './Input.styled';\n\ninterface InputTypes {\n  [INPUT_TYPE.TEXT]: string;\n  [INPUT_TYPE.PASSWORD]: string;\n  [INPUT_TYPE.EMAIL]: string;\n}\n\ntype InputProps = {\n  type: keyof InputTypes;\n  name: string;\n  tabIndex?: number;\n  labelText: string;\n  idInput: string;\n  onChange(e: any): void;\n  placeholder: string;\n  validIcon?: boolean;\n  refInput(node: any): void;\n  validationStatusBeforeSubmit: boolean;\n  showValidationMessage?: boolean;\n  onBlur?(e: any): void;\n  onFocus?(e: any): void;\n  defaultValue?: string;\n  autoComplete?: string;\n  isUserExist?: boolean;\n  pattern?: string;\n  textError?: string;\n  theme?: { [key: string]: any };\n};\n\ntype InputState = {\n  hasValue: boolean;\n  validValue: boolean;\n  showErrorText: boolean;\n  showPassword: boolean;\n  showPassValidationBlock: boolean;\n  isSpaceInPass: boolean;\n  isPatternPass: boolean;\n  startInputPass: boolean;\n  isBlur: boolean;\n};\n\nexport class Input extends React.Component<InputProps, InputState> {\n  constructor(props: InputProps) {\n    super(props);\n    this.state = {\n      hasValue: false,\n      validValue: true,\n      showErrorText: false,\n      showPassword: false,\n      showPassValidationBlock: false,\n      isSpaceInPass: false,\n      isPatternPass: false,\n      startInputPass: false,\n      isBlur: false\n    };\n  }\n\n  static defaultProps = {\n    validIcon: false,\n    showValidationMessage: true,\n    tabIndex: 0\n  };\n\n  componentDidMount() {\n    const { defaultValue } = this.props;\n\n    if (defaultValue) {\n      this.setState({ hasValue: true });\n    }\n  }\n\n  onBlurValidationInput(event: any, onBlur: any) {\n    event.target.classList.remove('changed');\n    this.setState({\n      validValue: !event.target.validity.typeMismatch && !event.target.validity.patternMismatch,\n      showPassValidationBlock: event.target.value.length !== 0,\n      isBlur: true\n    });\n    if (onBlur) {\n      onBlur(event);\n    }\n  }\n\n  onInputFocus(event: any) {\n    this.setState({ isBlur: false });\n  }\n\n  validationPassword = (event: any, onChange: any) => {\n    const isSpaceInPass = /\\s/.test(event.target.value);\n    let isPatternPass = false;\n    if (this.props.pattern) {\n      isPatternPass = new RegExp(this.props.pattern).test(event.target.value);\n    }\n\n    if (event.target.value !== 0) {\n      this.setState({\n        startInputPass: event.target.value !== 0,\n        isSpaceInPass,\n        isPatternPass\n      });\n    }\n\n    if (!isSpaceInPass && isPatternPass && onChange) {\n      onChange(event);\n    }\n  };\n\n  showErrorText = () => {\n    this.setState({ showErrorText: !this.state.validValue || !this.state.hasValue });\n  };\n\n  showHidePassword() {\n    this.setState({ showPassword: !this.state.showPassword });\n  }\n\n  setTypePassword() {\n    return this.state.showPassword ? INPUT_TYPE.TEXT : INPUT_TYPE.PASSWORD;\n  }\n\n  showPassValidationBlock() {\n    this.setState({ showPassValidationBlock: true });\n  }\n\n  render() {\n    const {\n      idInput,\n      type,\n      name,\n      tabIndex = 0,\n      placeholder,\n      labelText,\n      onChange,\n      validIcon,\n      textError,\n      refInput,\n      defaultValue,\n      autoComplete,\n      pattern,\n      validationStatusBeforeSubmit,\n      showValidationMessage,\n      isUserExist,\n      onBlur,\n      onFocus\n    } = this.props;\n    const { isBlur } = this.state;\n    return (\n      <InputContainer theme={this.props.theme} isUserExist={isUserExist || false}>\n        <InputElement\n          id={idInput}\n          ref={refInput}\n          type={type === INPUT_TYPE.PASSWORD ? this.setTypePassword() : type}\n          name={name}\n          placeholder={placeholder}\n          className={!this.state.hasValue ? 'is-empty' : 'full'}\n          tabIndex={tabIndex}\n          defaultValue={defaultValue}\n          autoComplete={autoComplete || ''}\n          pattern={pattern}\n          onBlur={event => {\n            this.setState({ hasValue: !!event.target.value });\n            this.onBlurValidationInput(event, onBlur);\n          }}\n          onFocus={(event: any) => {\n            if (type === INPUT_TYPE.PASSWORD) {\n              this.showPassValidationBlock();\n            }\n            if (onFocus) {\n              onFocus(event);\n            }\n            this.onInputFocus(event);\n          }}\n          onChange={\n            type === INPUT_TYPE.PASSWORD\n              ? (event: any) => this.validationPassword(event, onChange)\n              : onChange\n          }\n          onInvalid={this.showErrorText}\n          validationStatusBeforeSubmit={validationStatusBeforeSubmit}\n          theme={this.props.theme}\n          isBlur={isBlur}\n        />\n        <InputLabel theme={this.props.theme} htmlFor={idInput}>\n          {labelText}\n        </InputLabel>\n        {validIcon && (\n          <ValidIcon theme={this.props.theme} name=\"check-mark-2\" size={12} isBlur={isBlur} />\n        )}\n        {textError && showValidationMessage && (\n          <ValidationMessageBlock>\n            <TextError theme={this.props.theme} className={!this.state.validValue ? 'active' : ''}>\n              {textError}\n            </TextError>\n          </ValidationMessageBlock>\n        )}\n        {type === INPUT_TYPE.PASSWORD && (\n          <EyeIcon\n            role=\"button\"\n            tabIndex={0}\n            ariaLabel={\n              this.state.showPassword\n                ? localize('[label eye icon hide]')\n                : localize('[label eye icon show]')\n            }\n            name={this.state.showPassword ? 'eye-close' : 'eye-open'}\n            onClick={() => {\n              this.showHidePassword();\n            }}\n            onKeyDown={(event: any) => {\n              if (\n                [KEYS.ENTER.toLowerCase(), KEYS.SPACEBAR.toLowerCase()].includes(\n                  event.key.toLowerCase()\n                )\n              ) {\n                event.preventDefault();\n                this.showHidePassword();\n              }\n            }}\n            theme={this.props.theme}\n          />\n        )}\n        {type === INPUT_TYPE.PASSWORD && showValidationMessage && (\n          <ValidationMessageBlock className={this.state.showPassValidationBlock ? 'show' : 'hide'}>\n            <TextError\n              theme={this.props.theme}\n              className={\n                this.state.startInputPass && (this.state.isSpaceInPass ? 'invalid' : 'valid')\n              }\n            >\n              <Icon name=\"check-mark-2\" />\n              {localize('[validation pass space]')}\n            </TextError>\n            <TextError\n              className={\n                this.state.startInputPass && (this.state.isPatternPass ? 'valid' : 'invalid')\n              }\n              theme={this.props.theme}\n            >\n              <Icon name=\"check-mark-2\" />\n              {localize('[validation pass count char]')}\n            </TextError>\n          </ValidationMessageBlock>\n        )}\n      </InputContainer>\n    );\n  }\n}\n\nexport default withTheme(Input);\n","export { default } from './Input';\n","import styled, { css } from 'styled-components';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport Input from '../../login/Input';\n\nexport const FormTitle = styled.h3`\n  ${reviewFontText};\n  font-weight: 300;\n  font-size: 13px;\n  margin-bottom: 24px;\n`;\n\nexport const LoginFormContainer = styled.div`\n  width: 100%;\n  ${FormTitle} {\n    padding-bottom: 44px;\n    margin-bottom: 0;\n    font-size: 20px;\n    text-align: center;\n  }\n  > div:not(:first-child) {\n    padding: 0 0 43px;\n    &:last-child {\n      padding: 0 0 8px;\n    }\n  }\n`;\n\nexport const LoginInput = styled(Input)`\n  input {\n    & + label {\n      font-size: 15px;\n    }\n  }\n`;\n\ntype LoginInputWrapperProps = {\n  validationStatusBeforeSubmit: boolean;\n};\nexport const LoginInputWrapper = styled.div<LoginInputWrapperProps>`\n  > div {\n    > div {\n      left: 0;\n      > span {\n        top: -11px;\n        font-size: 11px;\n      }\n      ${props =>\n        props.validationStatusBeforeSubmit === false &&\n        css`\n          visibility: visible;\n          top: 40px;\n          > span {\n            top: -6px;\n            visibility: visible;\n          }\n        `}\n    }\n\n    input {\n      width: 100%;\n      height: 30px;\n      background: #fff;\n      ${reviewFontText};\n      font-size: 15px;\n      font-weight: 600;\n      border: none;\n      border-radius: 0;\n      border-bottom: 1px solid #eaedf1;\n      box-shadow: none;\n      padding: 0 0 7px 0;\n\n      &.is-empty {\n        & + label {\n          font-size: 15px;\n          padding: 0;\n        }\n\n        &:focus {\n          & + label {\n            top: -15px;\n            padding: 0;\n            font-size: 11px;\n          }\n        }\n      }\n\n      &.full {\n        &:valid {\n          background-color: #fff;\n          box-shadow: none;\n          border: none;\n          border-bottom: 1px solid #eaedf1;\n        }\n        &:invalid {\n          background-color: #fff;\n          box-shadow: none;\n          border: none;\n          border-bottom: 1px solid #f85d67;\n        }\n        &:hover {\n          border-bottom: 1px solid #469dd5;\n        }\n        &:focus {\n          border-bottom: 2px solid #469dd5;\n          & + label {\n            top: -15px;\n            padding: 0;\n            font-size: 11px;\n          }\n        }\n        & + label {\n          top: -15px;\n          padding: 0;\n          font-size: 11px;\n        }\n      }\n\n      &:hover {\n        border-bottom: 1px solid #469dd5;\n      }\n\n      &:focus {\n        border: none;\n        border-bottom: 2px solid #469dd5;\n        box-shadow: none;\n        & + label {\n          top: -15px;\n          padding: 0;\n          font-size: 11px;\n        }\n      }\n\n      ${props =>\n        props.validationStatusBeforeSubmit === false &&\n        css`\n          & {\n            border: none;\n            border-bottom: 1px solid #f85d67;\n\n            & + label {\n              font-size: 15px;\n              padding: 0;\n            }\n\n            &.full {\n              &:invalid {\n                border: none;\n                border-bottom: 1px solid #f85d67;\n                box-shadow: none;\n                background: #fff;\n              }\n              border: none;\n              border-bottom: 1px solid #f85d67;\n            }\n\n            &:hover,\n            &:focus {\n              border-bottom: 1px solid #f85d67;\n\n              & + label {\n                top: -15px;\n                padding: 0;\n                font-size: 11px;\n              }\n            }\n          }\n        `};\n    }\n  }\n`;\n","import * as React from 'react';\nimport { localize } from 'core/localization';\nimport { INPUT_TYPE } from 'constants/components';\nimport { FormTitle, LoginInput, LoginFormContainer, LoginInputWrapper } from './LoginForm.styled';\n\ntype LoginFormProps = {\n  name: boolean;\n  email: boolean;\n  onChange(e?: any): void;\n  onBlur(e?: any): void;\n  getRefs(e?: any): void;\n  theme?: { [key: string]: any }\n};\n\nexport const LoginForm = (props: LoginFormProps) => {\n  const { name, email, onChange, onBlur, getRefs } = props;\n  return (\n    <LoginFormContainer>\n      <FormTitle>{localize('[please identify yourself]')}</FormTitle>\n      <LoginInputWrapper validationStatusBeforeSubmit={name}>\n        <LoginInput\n          idInput=\"name\"\n          type={INPUT_TYPE.TEXT}\n          refInput={(node: any) => getRefs(node)}\n          name=\"name\"\n          labelText=\"Name\"\n          placeholder=\"John Doe\"\n          onChange={onChange}\n          onBlur={onBlur}\n          validIcon={false}\n          pattern=\"^(?!\\s*$).+\"\n          textError={localize('[error name input]')}\n          validationStatusBeforeSubmit={name}\n          theme={props.theme}\n        />\n      </LoginInputWrapper>\n      <LoginInputWrapper validationStatusBeforeSubmit={email}>\n        <LoginInput\n          idInput=\"email\"\n          type={INPUT_TYPE.EMAIL}\n          refInput={(node: any) => getRefs(node)}\n          name=\"email\"\n          labelText=\"Email\"\n          placeholder=\"john@example.com\"\n          autoComplete=\"new-email\"\n          onChange={onChange}\n          onBlur={onBlur}\n          validIcon={false}\n          textError={localize('[error email input]')}\n          validationStatusBeforeSubmit={email}\n          theme={props.theme}\n        />\n      </LoginInputWrapper>\n    </LoginFormContainer>\n  );\n};\n\nexport default LoginForm;\n","import styled, { css } from 'styled-components';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport { bounce } from 'components/mixins/interactivity';\nimport { transparentize } from 'utils/color';\n\nexport const CommentFormContainer = styled.div`\n  width: 100%;\n`;\n\nexport const FormTitle = styled.h3`\n  ${reviewFontText};\n  font-weight: 600;\n  font-size: 13px;\n  margin-bottom: 24px;\n  text-align: left;\n`;\n\ntype CommentTextareaProps = {\n  ariaLabel: string;\n  validComment: boolean;\n}\nexport const CommentTextarea = styled.textarea.attrs((props: CommentTextareaProps) => ({\n  'aria-label': props.ariaLabel\n})) <CommentTextareaProps>`\n  ${reviewFontText};\n  display: block;\n  width: 100%;\n  height: 136px;\n  max-height: 136px;\n  padding: 12px;\n  margin-bottom: 4px;\n  resize: none;\n  border: 1px solid #eaedf1;\n  border-radius: 2px;\n  outline: none;\n  font-size: 12px;\n  line-height: 20px;\n\n  &:hover {\n    border-color: #76b6e0;\n  }\n\n  &:focus {\n    outline: none;\n    border-color: #469dd5;\n    box-shadow: inset 0 1px 3px 0 rgba(70, 157, 213, 0.3);\n  }\n\n  ${props =>\n    !props.validComment &&\n    css`\n      & {\n        background-color: ${transparentize(props.theme.colors.textColor, 0.02)};\n        box-shadow: inset 0 2px 0 0 ${transparentize(props.theme.colors.incorrectColor, 0.06)};\n        border: solid 1px ${props.theme.colors.incorrectColor};\n        ${bounce};\n      }\n    `};\n`;\n","import React from 'react';\nimport { localize } from 'core/localization';\nimport { FormTitle, CommentFormContainer, CommentTextarea } from './CommentForm.styled';\nimport { REVIEW_COMMENT_PROPERTIES, REVIEW_COMMENT_TYPES } from 'constants/review';\n\ntype CommentFormProps = {\n  commentText: string;\n  isValidComment: boolean;\n  onChange(e?: any): void;\n  getRefs(e?: any): void;\n  context: any;\n  isGeneral: boolean;\n};\n\nexport const localizationKeys: { [key: string]: string } = {\n  [REVIEW_COMMENT_PROPERTIES.DEFAULT_TITLE]: 'your comment',\n  [REVIEW_COMMENT_PROPERTIES.TITLE]: 'course comment',\n  [REVIEW_COMMENT_PROPERTIES.INTRODUCTION]: 'introduction comment',\n  [REVIEW_COMMENT_PROPERTIES.LEARNING_CONTENT]: 'learning content comment',\n  [REVIEW_COMMENT_PROPERTIES.QUESTION]: 'question comment',\n  [REVIEW_COMMENT_PROPERTIES.VOICE_OVER]: 'voice over comment',\n  [REVIEW_COMMENT_PROPERTIES.CONTENT_ITEM]: 'content item comment',\n  [REVIEW_COMMENT_PROPERTIES.TITLE_OF_THE_SECTION]: 'section comment',\n  [REVIEW_COMMENT_PROPERTIES.GENERAL]: 'leave general comments'\n};\n\nfunction getLocalizationKey({ type, property = '', isGeneral }: { type: string; property: string; isGeneral: boolean }): string {\n  if (isGeneral) {\n    return localizationKeys[REVIEW_COMMENT_PROPERTIES.GENERAL];\n  }\n  switch (type) {\n    case REVIEW_COMMENT_TYPES.QUESTION:\n      return localizationKeys[property] || localizationKeys[REVIEW_COMMENT_PROPERTIES.QUESTION];\n    case REVIEW_COMMENT_TYPES.INFORMATION_CONTENT:\n      return localizationKeys[property] || localizationKeys[REVIEW_COMMENT_PROPERTIES.CONTENT_ITEM];\n    case REVIEW_COMMENT_TYPES.COURSE:\n      return localizationKeys[property];\n    case REVIEW_COMMENT_TYPES.SECTION:\n      return localizationKeys[REVIEW_COMMENT_PROPERTIES.TITLE_OF_THE_SECTION];\n    default:\n      return localizationKeys[REVIEW_COMMENT_PROPERTIES.DEFAULT_TITLE];\n  }\n}\n\nexport const CommentForm = (props: CommentFormProps) => {\n  const { commentText, isValidComment, onChange, getRefs, context, isGeneral } = props;\n  const type = context && context.type;\n  const property = context && context.property;\n  const title = getLocalizationKey({ type, property, isGeneral });\n\n  return (\n    <CommentFormContainer>\n      <FormTitle>{localize(`[${title}]`)}</FormTitle>\n      <CommentTextarea\n        tabIndex={1}\n        ref={getRefs}\n        ariaLabel={localize('[comment area]')}\n        validComment={isValidComment}\n        onChange={onChange}\n        name=\"commentText\"\n        value={commentText}\n      />\n    </CommentFormContainer>\n  );\n};\n\nexport default CommentForm;\n","import styled from 'styled-components';\nimport buttonDefaultStyle from 'components/mixins/normalize';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport { crossFade, transition } from 'components/mixins/interactivity';\nimport media from 'components/mixins/media';\nimport { centerAbsoluteElementY } from 'components/mixins/placement';\nimport { transparentize } from 'utils/color';\nimport Icon from 'components/common/Icon';\n\nexport const CommentFormContainer = styled.div`\n  width: 100%;\n`;\n\nexport const FormWrapper = styled.form`\n  ${reviewFontText};\n  min-height: 285px;\n  max-height: 356px;\n`;\n\nexport const SubmitIcon = styled(Icon)`\n  margin: 0 5px 0 17px;\n  top: 1px;\n`;\n\nexport const FormContent = styled.div`\n  min-height: 285px;\n  background: ${props => props.theme.colors.contentBodyColor};\n  padding: 22px 14px 22px 16px;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  width: 430px;\n\n  ${media.mobile`\n    width: 300px;\n  `};\n`;\n\nexport const FormActions = styled.div`\n  align-self: flex-end;\n  padding-top: 16px;\n`;\n\ntype FormSubmitButtonProps = {\n  tabIndex: number;\n  disabled: any;\n  onClick: any;\n  onKeyDown: any;\n};\nexport const FormSubmitButton = styled.button<FormSubmitButtonProps>`\n  ${buttonDefaultStyle};\n  position: relative;\n  background: #4caf50;\n  border-radius: 16px;\n  padding: 10px 20px 10px 0;\n  color: #fff;\n  font-size: 11px;\n  line-height: 11px;\n  font-weight: 600;\n  cursor: pointer;\n  box-shadow: 0 2px 8px 0 ${transparentize('#000000', 0.2)};\n  ${transition(0.3)};\n\n  &:hover,\n  &:focus {\n    background: #46a14a;\n  }\n\n  &:disabled:before {\n    background-color: rgba(255, 255, 255, 0.3);\n    content: '';\n    cursor: not-allowed;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n`;\n\nexport const FormCancelButton = styled.button`\n  ${buttonDefaultStyle};\n  font-size: 11px;\n  font-weight: 600;\n  color: #99a9b8;\n  cursor: pointer;\n  margin-left: 10px;\n\n  &:hover,\n  &:focus {\n    color: #81c884;\n  }\n`;\n\nexport const SuccessMessageIcon = styled(Icon)`\n  ${centerAbsoluteElementY};\n  left: 8px;\n  color: #4caf50;\n  line-height: 7px;\n  position: absolute;\n`;\n\nexport const ErrorMessageIcon = styled.div`\n  ${centerAbsoluteElementY};\n  left: 12px;\n  color: #4caf50;\n  position: absolute;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nexport const SuccessMessage = styled.div`\n  ${reviewFontText};\n  line-height: 17px;\n  padding: 7px 13px 7px 27px;\n  background: #f6fbf7;\n  border-radius: 3px;\n  border: solid 1px #d3ecd4;\n  ${crossFade('fromRight')};\n  margin-top: 16px;\n  position: relative;\n  align-self: flex-end;\n`;\n\nexport const ErrorMessage = styled(SuccessMessage)`\n  background: rgba(248, 93, 103, 0.1);\n  border: solid 1px rgba(248, 93, 103, 0.3);\n`;\n","import * as React from 'react';\nimport { STATUS_OK, COMMENT_SENDING_FAILED } from 'constants/review';\nimport { localize } from 'core/localization';\nimport eventEmitter, { events } from 'core/events/eventEmitter';\nimport LoginForm from '../LoginForm/LoginForm';\nimport CommentForm from '../CommentForm/CommentForm';\nimport {\n  FormWrapper,\n  FormContent,\n  FormActions,\n  SubmitIcon,\n  FormSubmitButton,\n  FormCancelButton,\n  SuccessMessage,\n  SuccessMessageIcon,\n  ErrorMessage,\n  ErrorMessageIcon\n} from './ReviewForm.styled';\n\ntype ReviewFormProps = {\n  context: { [key: string]: any };\n  closePopover(e?: any): void;\n  isGeneral: boolean;\n  role: string;\n  ariaModal: boolean;\n  tabIndex: number;\n  theme?: { [key: string]: any }\n};\n\ntype ReviewFormState = {\n  requestSending: boolean;\n  commentText: string;\n  isValidComment: boolean;\n  showSuccessMessage: boolean;\n  showErrorMessage: boolean;\n  showLoginForm: boolean;\n  name: string;\n  email: string;\n  validationStatusBeforeSubmit: {\n    name: boolean;\n    email: boolean;\n  }\n}\nexport class ReviewForm extends React.Component<ReviewFormProps, ReviewFormState> {\n  loginRefs: { [key: string]: any };\n\n  constructor(props: ReviewFormProps) {\n    super(props);\n\n    this.state = {\n      requestSending: false,\n      commentText: '',\n      isValidComment: true,\n      showSuccessMessage: false,\n      showErrorMessage: false,\n      showLoginForm: false,\n      name: '',\n      email: '',\n      validationStatusBeforeSubmit: {\n        name: true,\n        email: true\n      }\n    };\n    this.getReviewerEmailAndName();\n    this.loginRefs = {\n      name: '',\n      email: ''\n    };\n  }\n\n  getReviewerEmailAndName = async () => {\n    const response: any = await eventEmitter.emit(events.REVIEW_RESTORE_USER);\n    this.setState({\n      name: response[0].name || '',\n      email: response[0].email || ''\n    });\n  };\n\n  beforeSubmitValidation = () => {\n    const nameValid = this.loginRefs.name ? this.loginRefs.name.validity.valid : false;\n    const emailValid = this.loginRefs.email ? this.loginRefs.email.validity.valid : false;\n    this.setState({\n      validationStatusBeforeSubmit: {\n        name: nameValid,\n        email: emailValid\n      }\n    });\n  };\n\n  checkInputValidation = (event: any) => {\n    if (event) {\n      this.setState({\n        validationStatusBeforeSubmit: {\n          ...this.state.validationStatusBeforeSubmit,\n          [event.target.name]: event.target.validity.valid || false\n        }\n      });\n    }\n  };\n\n  onChange = (event: any) => {\n    this.setState({ [event.target.name]: event.target.value } as any);\n  };\n\n  onBlur = (event: any) => {\n    this.setState({ [event.target.name]: event.target.value } as any);\n    return this.state.showLoginForm && this.checkInputValidation(event);\n  };\n\n  getRefs = (element: any) => {\n    if (element) {\n      this.loginRefs[element.name] = element;\n    }\n  };\n\n  validateComment = () => {\n    const {\n      email,\n      name,\n      commentText,\n      showLoginForm,\n      validationStatusBeforeSubmit,\n      requestSending\n    } = this.state;\n\n    const isValidBeforeSubmit =\n      validationStatusBeforeSubmit.email && validationStatusBeforeSubmit.name;\n\n    if (!commentText.trim()) {\n      this.setState({ isValidComment: false });\n      return false;\n    }\n    if (!email || !name) {\n      this.setState({\n        showLoginForm: true\n      });\n      return false;\n    }\n    if ((showLoginForm && !isValidBeforeSubmit) || requestSending) {\n      return false;\n    }\n\n    return true;\n  };\n\n  sendComment = async (event: any) => {\n    event.preventDefault();\n    if (this.state.showLoginForm) {\n      this.checkInputValidation(event);\n      this.beforeSubmitValidation();\n    }\n    const { context, isGeneral } = this.props;\n    const { email, name, commentText } = this.state;\n    if (!this.validateComment()) {\n      return;\n    }\n    eventEmitter.emit(events.REVIEWER_AUTHORIZED, { email, name });\n    const data: { [key: string]: any } = {\n      text: commentText\n    };\n\n    if (!isGeneral) {\n      data.context = context;\n    }\n    this.setState({\n      showSuccessMessage: false,\n      showErrorMessage: false,\n      requestSending: true\n    });\n    const response: any = await eventEmitter.emit(events.COMMENT_SENT, { data });\n\n    if (response[0] === STATUS_OK) {\n      this.setState({\n        showSuccessMessage: true,\n        showErrorMessage: false,\n        showLoginForm: false,\n        isValidComment: true,\n        commentText: '',\n        requestSending: false\n      });\n    }\n\n    if (response[0] === COMMENT_SENDING_FAILED) {\n      this.setState({\n        showErrorMessage: true,\n        showSuccessMessage: false,\n        requestSending: false\n      });\n    }\n  };\n\n  componentDidUpdate() {\n    const activeElem = document.activeElement;\n    if (\n      activeElem && activeElem.getAttribute('name') !== 'commentText' &&\n      this.loginRefs.commentText\n    ) {\n      setTimeout(() => {\n        this.loginRefs.commentText.focus();\n      }, 0);\n    }\n  }\n\n  render() {\n    const { closePopover, context, isGeneral } = this.props;\n    const {\n      showSuccessMessage,\n      showErrorMessage,\n      showLoginForm,\n      requestSending,\n      commentText,\n      isValidComment\n    } = this.state;\n    const { name, email } = this.state.validationStatusBeforeSubmit;\n    return (\n      <FormWrapper>\n        <FormContent theme={this.props.theme}>\n          {showLoginForm ? (\n            <LoginForm\n              getRefs={this.getRefs}\n              name={name}\n              email={email}\n              onChange={this.onChange}\n              onBlur={this.onBlur}\n              theme={this.props.theme}\n            />\n          ) : (\n              <CommentForm\n                getRefs={this.getRefs}\n                commentText={commentText}\n                isValidComment={isValidComment}\n                onChange={this.onChange}\n                context={context}\n                isGeneral={isGeneral}\n              />\n            )}\n          <FormActions role=\"presentation\">\n            <FormSubmitButton\n              tabIndex={1}\n              disabled={requestSending ? 'disabled' : false}\n              onClick={this.sendComment}\n              onKeyDown={(event: any) => {\n                if (event.key === 'Enter') {\n                  this.sendComment(event);\n                }\n              }}\n            >\n              <SubmitIcon size={9} name={'arrow-send'} theme={this.props.theme} />\n              {showLoginForm ? localize('[post comment]') : localize('[post]')}\n            </FormSubmitButton>\n            <FormCancelButton\n              tabIndex={1}\n              onClick={closePopover}\n              onKeyDown={event => {\n                if (event.key === 'Enter') {\n                  closePopover(event);\n                }\n              }}\n            >\n              {localize('[cancel]')}\n            </FormCancelButton>\n          </FormActions>\n          {showSuccessMessage && (\n            <SuccessMessage>\n              <SuccessMessageIcon theme={this.props.theme} size={9} name={'check-mark-2'} />\n              {localize('[comment has been sent successfully]')}\n            </SuccessMessage>\n          )}\n          {showErrorMessage && (\n            <ErrorMessage>\n              <ErrorMessageIcon>{'!'}</ErrorMessageIcon>\n              {localize('[error comment sending]')}\n            </ErrorMessage>\n          )}\n        </FormContent>\n      </FormWrapper>\n    );\n  }\n}\n\nexport default ReviewForm;\n","import styled, { css } from 'styled-components';\nimport { transparentize } from 'utils/color';\nimport media from 'components/mixins/media';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport { transition } from 'components/mixins/interactivity';\nimport Icon from 'components/common/Icon';\n\nexport const CommentIcon = styled(Icon)`\n  color: inherit;\n  margin: 0;\n\n  &.icon {\n    line-height: 13px;\n  }\n`;\n\nexport const ToggleButtonText = styled.span`\n  display: inline-block;\n  opacity: 0;\n  ${transition('all', '0.3s')};\n`;\n\ntype ToggleButtonProps = {\n  isGeneral: boolean;\n  isActive: boolean;\n};\nexport const ToggleButton = styled.div<ToggleButtonProps>`\n  ${reviewFontText};\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 600;\n  margin: 10px;\n  overflow: hidden;\n  ${props =>\n    props.isGeneral\n      ? css`\n          padding: 14px 39px 14px 0;\n          color: ${transparentize('#42515f', 0.5)};\n          background: #fff;\n          border-radius: 22px;\n          box-shadow: 0 2px 10px 0 ${transparentize('#000000', 0.1)};\n\n          height: 41px;\n          ${transition('all', '0.3s')};\n\n          &:hover {\n            max-width: 100%;\n          }\n\n          &:hover,\n          &:focus {\n            color: #4caf50;\n            outline: none;\n\n            ${CommentIcon} {\n              color: #4caf50;\n            }\n          }\n\n          ${CommentIcon} {\n            color: #73899e;\n            margin: 0 21px 0 15px;\n            transform: scale(1.4);\n            display: inline-block;\n            ${transition('all', '0.3s')};\n          }\n\n          ${props.isActive &&\n            css`\n              color: #4caf50;\n              box-shadow: inset 0 1px 3px 0 ${transparentize('#000000', 0.08)};\n\n              ${CommentIcon} {\n                color: #4caf50;\n              }\n            `}\n        `\n      : css`\n          width: 34px;\n          height: 34px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          color: #73899e;\n          background: #fff;\n          margin: 6px;\n          padding: 10px;\n          border-radius: 50%;\n          box-shadow: 0 2px 10px 0 ${transparentize('#000000', 0.1)};\n\n          &:hover,\n          &:focus {\n            color: #4caf50;\n            outline: none;\n          }\n\n          ${props.isActive &&\n            css`\n              background: #4caf50;\n              color: #fff;\n\n              &:hover,\n              &:focus {\n                color: #fff;\n                outline: none;\n              }\n            `}\n        `};\n`;\n\ntype ReviewWrapperProps = {\n  isVoiceOver: boolean;\n  isGeneral: boolean;\n  isActive: boolean;\n};\nexport const ReviewWrapper = styled.div<ReviewWrapperProps>`\n  background: ${transparentize('#191919', 0.02)};\n\n  & .active {\n    display: block !important;\n  }\n\n  ${props =>\n    props.isVoiceOver &&\n    css`\n      ${media.small`\n        display: none;\n      `};\n    `}\n\n  ${props =>\n    props.isGeneral\n      ? css`\n          position: fixed;\n          bottom: 8px;\n          right: 24px;\n          z-index: 101;\n\n          max-width: 61px;\n          white-space: nowrap;\n          ${transition('all', '0.3s')};\n\n          ${props.isActive &&\n            css`\n              max-width: 300px;\n\n              ${ToggleButtonText} {\n                opacity: 1;\n              }\n\n              ${ToggleButton} {\n                ${CommentIcon} {\n                  margin: 0 21px 0 24px;\n                  transform: scale(1);\n                }\n              }\n            `}\n\n          &:hover {\n            max-width: 300px;\n\n            ${ToggleButtonText} {\n              opacity: 1;\n            }\n            ${CommentIcon} {\n              color: #73899e;\n              margin: 0 21px 0 24px;\n              transform: scale(1);\n            }\n          }\n        `\n      : css`\n          position: absolute;\n          top: 0;\n          right: -52px;\n          z-index: 10;\n          display: flex;\n          ${media.large`\n            right: -22px;\n          `}\n        `}\n  border-radius: 30px;\n`;\n","import * as React from 'react';\nimport { Tooltip } from 'components/common';\nimport { localize } from 'core/localization';\nimport { Hint } from 'components/common/Hint/Hint';\nimport ReviewForm from '../ReviewForm';\nimport { CommentIcon, ReviewWrapper, ToggleButton, ToggleButtonText } from './ReviewSpot.styled';\nimport { withTheme } from 'styled-components';\n\ntype ReviewSpotProps = {\n  isGeneral: boolean;\n  isVoiceOver: boolean;\n  context: { [key: string]: any };\n  hintName: string;\n  theme?: {[key: string]: any};\n};\n\ntype ReviewSpotState = {\n  isExpanded: boolean;\n}\nexport class ReviewSpot extends React.Component<ReviewSpotProps, ReviewSpotState> {\n  constructor(props: ReviewSpotProps) {\n    super(props);\n\n    this.state = {\n      isExpanded: false\n    };\n  }\n\n  static defaultProps = {\n    isGeneral: false,\n    isVoiceOver: false\n  };\n\n  toggle = (event: any) => {\n    event.preventDefault();\n    this.setState({\n      isExpanded: !this.state.isExpanded\n    });\n  };\n\n  closePopup = () => {\n    this.setState({\n      isExpanded: false\n    });\n  };\n\n  render() {\n    const { isExpanded } = this.state;\n    const { isGeneral, context, hintName, isVoiceOver } = this.props;\n    return (\n      <ReviewWrapper isVoiceOver={isVoiceOver} isGeneral={isGeneral} isActive={isExpanded}>\n        <Hint\n          position={isGeneral ? 'top' : 'auto'}\n          hintElements={\n            isGeneral\n              ? localize('[click to leave a general comment]')\n              : localize('[click to leave a comment]')\n          }\n          hintName={hintName}\n          isExpanded={!!hintName}\n        >\n          <Tooltip\n            trigger={'manual'}\n            open={isExpanded}\n            onRequestClose={() => this.closePopup()}\n            arrow={true}\n            position={'right'}\n            interactive\n            tooltipTheme={'light'}\n            html={\n              <ReviewForm\n                role=\"dialog\"\n                ariaModal={true}\n                tabIndex={-1}\n                isGeneral={isGeneral}\n                context={context}\n                closePopover={this.toggle}\n                theme={this.props.theme}\n              />\n            }\n          >\n            <ToggleButton\n              role=\"button\"\n              tabIndex={1}\n              onClick={this.toggle}\n              onKeyDown={event => {\n                if (event.key === ` ` || event.key === 'Enter') {\n                  this.toggle(event);\n                }\n              }}\n              isActive={isExpanded}\n              isGeneral={isGeneral}\n            >\n              <CommentIcon size={isGeneral ? 9 : 10} name={'comment'} />\n              {isGeneral && (\n                <ToggleButtonText>{localize('[leave general comments]')}</ToggleButtonText>\n              )}\n            </ToggleButton>\n          </Tooltip>\n        </Hint>\n      </ReviewWrapper>\n    );\n  }\n}\n\nexport default withTheme(ReviewSpot);\n","export { default } from './ReviewSpot';\n"],"sourceRoot":""}