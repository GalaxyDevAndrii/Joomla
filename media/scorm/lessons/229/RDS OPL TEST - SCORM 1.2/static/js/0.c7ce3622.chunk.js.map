{"version":3,"sources":["core/xApi/constants.ts","core/xApi/statements/utils/dateTimeConverter.ts","core/xApi/statements/xapiEntityFactory.ts","core/xApi/tinCan.ts","core/xApi/statements/dataBuilders/course.ts","core/xApi/statements/dataBuilders/section.ts","core/xApi/statements/dataBuilders/questions/multipleChoice.ts","core/xApi/statements/dataBuilders/questions/fillInTheBlanks.ts","core/xApi/statements/dataBuilders/questions/openQuestion.ts","core/xApi/statements/dataBuilders/questions/statement.ts","core/xApi/statements/dataBuilders/questions/rankingText.ts","core/xApi/statements/dataBuilders/questions/textMatching.ts","core/xApi/statements/dataBuilders/questions/scenario.ts","core/xApi/statements/dataBuilders/questions/dragAndDrop.ts","core/xApi/statements/dataBuilders/questions/hotspot.ts","core/xApi/statements/dataBuilders/questions/index.ts","core/xApi/statements/dataBuilders/questions/informationContent.ts","core/xApi/statements/factory.ts","core/xApi/errors/errorHandler.ts","core/xApi/events/EventHandler.ts","core/xApi/statements/storage.ts","core/xApi/statements/sender.ts","core/xApi/events/LrsEventHandler.ts","core/xApi/events/NpsEventHandler.ts","core/xApi/index.ts"],"names":["separators","interactionTypes","activityTypes","extensionKeys","verbs","started","id","display","stopped","passed","failed","experienced","answered","mastered","progressed","evaluated","timeToISODuration","timeInMilliseconds","hours","roundUp","minutes","seconds","value","parseInt","sectionActivity","section","TinCan","Activity","getSectionAbsoluteUrl","definition","ActivityDefinition","type","name","title","result","score","omitScore","response","duration","Result","Score","scaled","courseId","sessionId","course","actor","lrs","nps","this","attemptId","settings","defaultLrsUrl","initializeInstance","getLrsRecordStore","defaultNpsUrl","getNpsRecordStore","instance","recordStore","courseName","addRecordStore","getActor","activity","getCurrentUrl","context","getDefaultContext","endpoint","uri","isDefaultLrs","LRS","version","username","credentials","password","allowFail","email","account","Agent","mbox","extendContext","Context","contextActivities","ContextActivities","extensions","registration","selectedLrs","verbsObject","ProgressStatus","PASSED","FAILED","IN_PROGRESS","courseStarted","verb","courseProgressed","timeSpent","xapiStatus","courseEvaluated","sectionProgressed","isInProgress","object","question","answers","filter","e","indexOf","map","join","correctResponsesPattern","questionTypes","correctAnswerId","isCorrect","interactionType","extraActivityDefinition","choices","option","description","image","text","questionContent","Object","keys","data","key","answerGroups","answerGroup","answer","answeredText","getOptions","array","index","toString","sources","targets","userResponse","find","i","shownSelectedValue","source","target","answerTexts","dropspots","x","y","dropSpot","userAnswer","answerItem","items","length","answerDropSpot","background","spots","spot","coords","questionAnswered","buildStatementData","multipleChoice","fillInTheBlanks","openQuestion","statement","rankingText","textMatching","scenario","dragAndDrop","hotspot","Error","getBuilder","rawData","tinCan","parent","hasOwnProperty","isSurvey","defaultContext","assign","activityDefinition","getQuestionAbsoluteUrl","questionExperienced","informationContentExperienced","listStatement","forEach","builder","Statement","console","error","errorToString","code","mesg","EventHandler","sendStatement","shouldHandlerErrors","handlers","factoryMethod","arg","a","async","handle","args","statementFactory","errorHandler","BaseEventHandler","statements","push","lastRequestSuccess","promises","batchSize","isAllowedStatement","storage","sendStorageStatements","Promise","all","doSend","sendStatements","bind","allowedVerbs","shift","statementsToSend","splice","send","resolve","reject","failedResult","err","eventEmitter","emit","events","APP_ONLINE","catch","setTimeout","APP_OFFLINE_OR_SERVER_ERROR","RETRY_DELAY_MILLISECONDS","LrsEventHandler","statementSender","sendLrsStatement","isScoringOfContentPagesAllowed","event","COURSE_STARTED","createHandler","COURSE_PROGRESSED","SECTION_PROGRESSED","QUESTION_ANSWERED","INFORMATION_CONTENT_EXPERIENCED","NpsEventHandler","sendNpsStatement","COURSE_EVALUATED","XApi","lrsEventHandler","npsEventHandler","initializeLrs","xApi","unsubscribeLrs","on","initializeNps","unsubscribeNps","errorToConsole","off","initialize"],"mappings":"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","file":"static/js/0.c7ce3622.chunk.js","sourcesContent":["export const defaultLrsName = 'default';\n\nexport const separators = {\n  comma: '[,]',\n  dot: '[.]'\n};\n\nexport const interactionTypes = {\n  choice: 'choice',\n  fillIn: 'fill-in',\n  matching: 'matching',\n  dragAndDrop: 'dragAndDrop',\n  hotspot: 'hotspot',\n  sequencing: 'sequencing',\n  other: 'other'\n};\n\nexport const activityTypes = {\n  course: 'http://adlnet.gov/expapi/activities/course',\n  objective: 'http://adlnet.gov/expapi/activities/objective',\n  interaction: 'http://adlnet.gov/expapi/activities/cmi.interaction'\n};\n\nexport const extensionKeys = {\n  courseId: 'http://easygenerator/expapi/course/id',\n  surveyMode: 'http://easygenerator/expapi/question/survey',\n  questionType: 'http://easygenerator/expapi/question/type',\n  imageUrl: 'http://easygenerator/expapi/question/imageUrl',\n  content: 'http://easygenerator/expapi/question/content',\n  answerTexts: 'http://easygenerator/expapi/question/answers'\n};\n\nexport const verbs = {\n  started: {\n    id: 'http://adlnet.gov/expapi/verbs/launched',\n    display: {\n      'en-US': 'started'\n    }\n  },\n  stopped: {\n    id: 'http://adlnet.gov/expapi/verbs/exited',\n    display: {\n      'en-US': 'stopped'\n    }\n  },\n  passed: {\n    id: 'http://adlnet.gov/expapi/verbs/passed',\n    display: {\n      'en-US': 'passed'\n    }\n  },\n  failed: {\n    id: 'http://adlnet.gov/expapi/verbs/failed',\n    display: {\n      'en-US': 'failed'\n    }\n  },\n  experienced: {\n    id: 'http://adlnet.gov/expapi/verbs/experienced',\n    display: {\n      'en-US': 'experienced'\n    }\n  },\n  answered: {\n    id: 'http://adlnet.gov/expapi/verbs/answered',\n    display: {\n      'en-US': 'answered'\n    }\n  },\n  mastered: {\n    id: 'http://adlnet.gov/expapi/verbs/mastered',\n    display: {\n      'en-US': 'mastered'\n    }\n  },\n  progressed: {\n    id: 'http://adlnet.gov/expapi/verbs/progressed',\n    display: {\n      'en-US': 'progressed'\n    }\n  },\n  evaluated: {\n    id: 'http://www.tincanapi.co.uk/verbs/evaluated',\n    display: {\n      'en-US': 'evaluated'\n    }\n  }\n};\n","export const timeToISODuration = (timeInMilliseconds: number) => {\n  timeInMilliseconds /= 1000;\n\n  const hours = roundUp(timeInMilliseconds / 3600);\n  timeInMilliseconds -= hours * 3600;\n\n  const minutes = roundUp(timeInMilliseconds / 60);\n  timeInMilliseconds -= minutes * 60;\n\n  const seconds = roundUp(timeInMilliseconds);\n  return `PT${hours}H${minutes}M${seconds}S`;\n};\n\nconst roundUp = (value: number) => {\n  return parseInt(value as any, 10);\n};\n","import { getCurrentUrl } from 'utils/window';\nimport TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { getSectionAbsoluteUrl } from 'utils/navigation';\nimport { activityTypes } from '../constants';\nimport { timeToISODuration } from './utils/dateTimeConverter';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const courseActivity = (courseName: any) =>\n  new TinCan.Activity({\n    id: getCurrentUrl(),\n    definition: new TinCan.ActivityDefinition({\n      type: activityTypes.course,\n      name: {\n        'en-US': courseName\n      }\n    })\n  });\n\nexport const sectionActivity = (section: any) =>\n  new TinCan.Activity({\n    id: getSectionAbsoluteUrl(section.id),\n    definition: new TinCan.ActivityDefinition({\n      type: activityTypes.objective,\n      name: {\n        'en-US': section.title\n      }\n    })\n  });\n\nexport const result = ({\n  score,\n  omitScore = false,\n  response,\n  duration\n}: {\n  score: number;\n  omitScore?: boolean;\n  response?: any;\n  duration?: number;\n}) =>\n  new TinCan.Result({\n    ...(!omitScore && {\n      score: new TinCan.Score({\n        scaled: score / 100\n      })\n    }),\n    ...(response && { response }),\n    ...(duration && { duration: timeToISODuration(duration) })\n  });\n","import TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { defaultLrsName, extensionKeys } from './constants';\nimport { courseActivity } from './statements/xapiEntityFactory';\n\nclass TinCanWrapper {\n  courseId: any;\n  sessionId: any;\n  course: any;\n  actor: any;\n  lrs: any;\n  nps: any;\n\n  initialize({ course, actor }: any) {\n    this.courseId = course.id;\n    this.sessionId = course.attemptId;\n    this.course = course;\n    this.actor = actor;\n    // TinCan.enableDebug();\n  }\n\n  initializeLrs(settings: any, defaultLrsUrl: any) {\n    this.lrs = new TinCan();\n    this.initializeInstance(this.lrs, this.getLrsRecordStore(settings, defaultLrsUrl));\n  }\n\n  initializeNps(defaultNpsUrl: any) {\n    this.nps = new TinCan();\n    this.initializeInstance(this.nps, this.getNpsRecordStore(defaultNpsUrl));\n  }\n\n  initializeInstance(instance: any, recordStore: any) {\n    instance.addRecordStore(recordStore);\n    instance.actor = this.getActor(this.actor);\n    instance.activity = courseActivity(this.course.title);\n    instance.context = this.getDefaultContext();\n  }\n\n  getLrsRecordStore(settings: any, defaultLrsUrl: any) {\n    let { uri: endpoint } = settings.lrs;\n    if (this.isDefaultLrs(settings)) {\n      endpoint = `${defaultLrsUrl}/xApi`;\n    }\n    return new TinCan.LRS({\n      endpoint,\n      version: settings.version,\n      username: settings.lrs.credentials.username,\n      password: settings.lrs.credentials.password,\n      allowFail: false\n    });\n  }\n\n  getNpsRecordStore(defaultNpsUrl: any) {\n    return new TinCan.LRS({\n      endpoint: `${defaultNpsUrl}/xApi`,\n      username: '',\n      password: '',\n      allowFail: false\n    });\n  }\n\n  getActor({ username, email, account }: any) {\n    if (account) {\n      return new TinCan.Agent({\n        name: username || account.name,\n        account\n      });\n    }\n    return new TinCan.Agent({\n      name: username,\n      mbox: `mailto:${email}`\n    });\n  }\n\n  getDefaultContext() {\n    return this.extendContext(\n      new TinCan.Context({\n        contextActivities: new TinCan.ContextActivities({})\n      })\n    );\n  }\n\n  extendContext(context: any) {\n    context.extensions = context.extensions || {};\n    context.extensions[extensionKeys.courseId] = this.courseId;\n    context.registration = this.sessionId;\n    return context;\n  }\n\n  isDefaultLrs(settings: any) {\n    return settings.selectedLrs === defaultLrsName;\n  }\n}\n\nexport default new TinCanWrapper();\n","import { verbs } from '../../constants';\nimport { result } from '../xapiEntityFactory';\nimport { ProgressStatus } from 'constants/progressStatus';\n\nconst verbsObject: Record<ProgressStatus, object> = {\n  [ProgressStatus.PASSED]: verbs.passed,\n  [ProgressStatus.FAILED]: verbs.failed,\n  [ProgressStatus.IN_PROGRESS]: verbs.progressed\n};\n\nexport const courseStarted = () => ({\n  verb: verbs.started\n});\n\nexport const courseProgressed = ({\n  course,\n  timeSpent,\n  xapiStatus\n}: {\n  course: any;\n  timeSpent: number;\n  xapiStatus: number;\n}) => ({\n  verb: verbsObject[xapiStatus as ProgressStatus],\n  result: result({ score: course.score, duration: timeSpent })\n});\n\nexport const courseStopped = () => ({\n  verb: verbs.stopped\n});\n\nexport const courseEvaluated = ({ score, response }: any) => ({\n  verb: verbs.evaluated,\n  result: result({ score, response })\n});\n","import { verbs } from '../../constants';\nimport { result, sectionActivity } from '../xapiEntityFactory';\nimport { isInProgress } from 'utils/comparison';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const sectionProgressed = ({\n  section,\n  xapiStatus\n}: {\n  section: any;\n  xapiStatus: number;\n}) => ({\n  verb: isInProgress(xapiStatus) ? verbs.progressed : verbs.mastered,\n  object: sectionActivity(section),\n  result: result({ score: section.score })\n});\n","import * as questionTypes from 'constants/questionTypes';\nimport { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.answers\n    .filter((e: any) => question.response.indexOf(e.id) >= 0)\n    .map((e: any) => e.id)\n    .join(separators.comma);\n  const correctResponsesPattern =\n    question.type === questionTypes.SINGLE_CHOICE_IMAGE\n      ? question.correctAnswerId\n      : question.answers\n          .filter((e: any) => e.isCorrect)\n          .map((e: any) => e.id)\n          .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.id,\n        description: {\n          'en-US': question.type === questionTypes.SINGLE_CHOICE_IMAGE ? option.image : option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nexport default (question: any, questionContent: any) => {\n  const response = Object.keys(question.response.data)\n    .map(key => `${question.response.data[key]}${separators.dot}${key}`)\n    .join(separators.comma);\n\n  const correctResponsesPattern = question.answerGroups\n    .map((answerGroup: any) => {\n      const correctAnswers = answerGroup.answers.filter((e: any) => e.isCorrect);\n      return correctAnswers\n        .map((answer: any) => `${answer.text}${separators.dot}${answerGroup.id}`)\n        .join(separators.comma);\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.fillIn,\n    extensions: {\n      [extensionKeys.content]: questionContent[0].value\n    }\n  };\n};\n","import { interactionTypes } from '../../../constants';\n\nexport default (question: any) => ({\n  response: question.response.answeredText,\n  omitScore: true,\n  interactionType: interactionTypes.other\n});\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response\n    .map((e: any) => `${e.id}${separators.dot}${e.isCorrect}`)\n    .join(separators.comma);\n  const correctResponsesPattern = question.answers\n    .map((e: any) => `${e.id}${separators.dot}${e.isCorrect}`)\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.id,\n        description: {\n          'en-US': option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response.map((e: any) => e.text).join(separators.comma);\n  const correctResponsesPattern = question.answers.map((e: any) => e.text).join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.text,\n        description: {\n          'en-US': option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const getOptions = (array: any) =>\n    array.map((e: any, index: any) => ({\n      id: index.toString(),\n      description: {\n        'en-US': e\n      }\n    }));\n\n  const sources = question.answers.map((e: any) => e.key);\n  const targets = question.answers\n    .map((e: any) => e.value)\n    .filter((e: any, index: any, array: any) => array.indexOf(e) === index);\n\n  const correctResponsesPattern = question.answers\n    .map((e: any) => `${sources.indexOf(e.key)}${separators.dot}${targets.indexOf(e.value)}`)\n    .join(separators.comma);\n\n  const response = sources\n    .map((e: any, index: any) => {\n      const userResponse = question.response.find((i: any) => i.key === e);\n      let answer = '';\n      if (userResponse && userResponse.shownSelectedValue) {\n        answer = targets.indexOf(userResponse.shownSelectedValue);\n      }\n      return `${index}${separators.dot}${answer}`;\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.matching,\n    extraActivityDefinition: {\n      source: getOptions(sources),\n      target: getOptions(targets)\n    }\n  };\n};\n","import { interactionTypes } from '../../../constants';\n\nexport default () => ({\n  interactionType: interactionTypes.other\n});\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nconst NOT_ANSWERED_PATTERN = '(-1,-1)';\n\nexport default (question: any) => {\n  const answerTexts = question.dropspots.map((e: any) => e.text).join(separators.comma);\n  const correctResponsesPattern = question.dropspots\n    .map((e: any) => `(${e.x},${e.y})`)\n    .join(separators.comma);\n  const response = question.dropspots\n    .map((dropSpot: any) => {\n      const userAnswer = question.response.find((answer: any) => answer.id === dropSpot.id);\n      if (!userAnswer) {\n        return NOT_ANSWERED_PATTERN;\n      }\n\n      const answerItem = userAnswer.items.length && userAnswer.items[0];\n      if (!answerItem) {\n        return NOT_ANSWERED_PATTERN;\n      }\n\n      const answerDropSpot = question.dropspots.find((e: any) => e.id === answerItem.id);\n      return `(${answerDropSpot.x},${answerDropSpot.y})`;\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.other,\n    extensions: {\n      [extensionKeys.imageUrl]: question.background,\n      [extensionKeys.answerTexts]: answerTexts\n    }\n  };\n};\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response.map((e: any) => `(${e.x},${e.y})`).join(separators.comma);\n  const correctResponsesPattern = question.spots\n    .map((spot: any) => spot.map((coords: any) => `(${coords.x},${coords.y})`).join(separators.dot))\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.other,\n    extensions: {\n      [extensionKeys.imageUrl]: question.background\n    }\n  };\n};\n","import { getQuestionAbsoluteUrl } from 'utils/navigation';\nimport * as questionTypes from 'constants/questionTypes';\nimport TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { activityTypes, verbs, extensionKeys } from '../../../constants';\nimport { sectionActivity, result } from '../../xapiEntityFactory';\nimport tinCan from '../../../tinCan';\n\nimport multipleChoice from './multipleChoice';\nimport fillInTheBlanks from './fillInTheBlanks';\nimport openQuestion from './openQuestion';\nimport statement from './statement';\nimport rankingText from './rankingText';\nimport textMatching from './textMatching';\nimport scenario from './scenario';\nimport dragAndDrop from './dragAndDrop';\nimport hotspot from './hotspot';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const questionAnswered = ([question, section, questionContent]: any) =>\n  buildStatementData(question, section, getBuilder(question)(question, questionContent));\n\nfunction getBuilder(question: any) {\n  switch (question.type) {\n    case questionTypes.SINGLE_CHOICE:\n    case questionTypes.MULTIPLE_CHOICE:\n    case questionTypes.SINGLE_CHOICE_IMAGE:\n      return multipleChoice;\n    case questionTypes.FILL_IN_THE_BLANK:\n      return fillInTheBlanks;\n    case questionTypes.OPEN_QUESTION:\n      return openQuestion;\n    case questionTypes.STATEMENT_CHOICE:\n      return statement;\n    case questionTypes.RANKING_TEXT:\n      return rankingText;\n    case questionTypes.TEXT_MATCHING:\n      return textMatching;\n    case questionTypes.SCENARIO:\n      return scenario;\n    case questionTypes.DRAG_AND_DROP_TEXT:\n      return dragAndDrop;\n    case questionTypes.HOTSPOT:\n      return hotspot;\n    default:\n      throw new Error(`Question type ${question.type} is not supported`);\n  }\n}\n\nexport function buildStatementData(question: any, section: any, rawData: any) {\n  const {\n    response,\n    correctResponsesPattern,\n    interactionType,\n    extraActivityDefinition,\n    omitScore,\n    extensions,\n    verb\n  } = rawData;\n  const context = defaultContext(question, section);\n  context.extensions = Object.assign(context.extensions, extensions);\n\n  let activityDefinition = {\n    name: {\n      'en-US': question.title\n    },\n    type: activityTypes.interaction,\n    interactionType,\n    ...(correctResponsesPattern && {\n      correctResponsesPattern: question.isSurvey ? [] : [correctResponsesPattern]\n    })\n  };\n  activityDefinition = Object.assign(activityDefinition, extraActivityDefinition);\n\n  return {\n    context,\n    verb: verb || verbs.answered,\n    object: new TinCan.Activity({\n      id: getQuestionAbsoluteUrl(section.id, question.id),\n      definition: new TinCan.ActivityDefinition(activityDefinition)\n    }),\n    result: result({ score: question.score, omitScore, response })\n  };\n}\n\nfunction defaultContext(question: any, section: any) {\n  return tinCan.extendContext(\n    new TinCan.Context({\n      contextActivities: new TinCan.ContextActivities({\n        parent: [sectionActivity(section)]\n      }),\n      extensions: {\n        [extensionKeys.surveyMode]: question.hasOwnProperty('isSurvey') && question.isSurvey,\n        [extensionKeys.questionType]: question.type\n      }\n    })\n  );\n}\n","import { buildStatementData } from '.';\nimport { verbs, interactionTypes } from '../../../constants';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const questionExperienced = ([question, section]: any) =>\n  buildStatementData(question, section, {\n    interactionType: interactionTypes.other,\n    verb: verbs.experienced\n  });\n","import TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { courseStarted, courseProgressed, courseEvaluated } from './dataBuilders/course';\nimport { sectionProgressed } from './dataBuilders/section';\nimport { questionAnswered } from './dataBuilders/questions';\nimport { questionExperienced } from './dataBuilders/questions/informationContent';\n\nexport interface StatementNames {\n  courseStarted: any;\n  courseProgressed: any;\n  courseEvaluated: any;\n  sectionProgressed: any;\n  questionAnswered: any;\n  informationContentExperienced: any;\n};\n\ntype Statement = {\n  name: keyof StatementNames,\n  instance: any;\n}\n\nclass StatementFactory implements StatementNames {\n  courseStarted: any;\n  courseProgressed: any;\n  courseEvaluated: any;\n  sectionProgressed: any;\n  questionAnswered: any;\n  informationContentExperienced: any;\n  listStatement: Array<Statement>;\n\n  constructor() {\n    this.listStatement = [\n      { name: 'courseStarted', instance: courseStarted },\n      { name: 'courseProgressed', instance: courseProgressed },\n      { name: 'courseEvaluated', instance: courseEvaluated },\n      { name: 'sectionProgressed', instance: sectionProgressed },\n      { name: 'questionAnswered', instance: questionAnswered },\n      { name: 'informationContentExperienced', instance: questionExperienced }\n    ]\n    this.listStatement.forEach((builder: Statement) => {\n      this[builder.name] = (...args: any) => new TinCan.Statement(builder.instance(...args));\n    });\n  }\n}\n\nexport default new StatementFactory();\n","export default (e: any) => {\n  console.error(`xApi error: [ ${errorToString(e)} ]`);\n  // TODO: add error handling logic\n};\n\nexport function errorToConsole(e: any) {\n  console.error(`xApi error: [ ${errorToString(e)} ]`);\n}\n\nfunction errorToString(e: any) {\n  if (!e) return 'undefined error';\n  // tinCan error\n  if (e.code && e.mesg) {\n    return `code: ${e.code}, message: ${e.mesg}`;\n  }\n\n  return e.toString();\n}\n","import BaseEventHandler from 'core/events/eventHandler';\nimport statementFactory, { StatementNames } from '../statements/factory';\nimport errorHandler from '../errors/errorHandler';\n\nexport default class EventHandler extends BaseEventHandler {\n  handlers: any[];\n  sendStatement: any;\n  shouldHandlerErrors: any;\n\n  constructor({ sendStatement, shouldHandlerErrors }: any) {\n    super();\n    this.handlers = [];\n    this.sendStatement = sendStatement;\n    this.shouldHandlerErrors = shouldHandlerErrors;\n  }\n\n  createHandler(factoryMethod: any) {\n    return async (arg: any) => {\n      await this.handle(factoryMethod, arg);\n    };\n  }\n\n  async handle(factoryMethod: keyof StatementNames, args: any) {\n    try {\n      const statement = statementFactory[factoryMethod](args);\n      await this.sendStatement(statement);\n    } catch (e) {\n      if (this.shouldHandlerErrors) {\n        errorHandler(e);\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n","class Storage {\n  statements: any[];\n\n  constructor() {\n    this.statements = [];\n  }\n\n  push(statement: any) {\n    this.statements.push(statement);\n  }\n\n  shift() {\n    const value = this.statements;\n    this.statements = [];\n    return value;\n  }\n}\n\nexport default new Storage();\n","import eventEmitter, { events } from 'core/events/eventEmitter';\nimport { RETRY_DELAY_MILLISECONDS } from 'core/http/requester';\nimport tinCan from '../tinCan';\nimport storage from './storage';\n\nlet lastRequestSuccess = true;\nclass StatementSender {\n  settings: any;\n  promises: any;\n  batchSize: any;\n\n  initialize(settings: any) {\n    this.settings = settings;\n    this.promises = [];\n    this.batchSize = 5;\n  }\n\n  sendLrsStatement(statement: any) {\n    if (!tinCan.isDefaultLrs(this.settings) && !this.isAllowedStatement(statement)) {\n      return;\n    }\n\n    storage.push(statement);\n    this.sendStorageStatements();\n\n    return Promise.all(this.promises);\n  }\n\n  sendNpsStatement(statement: any) {\n    this.doSend(tinCan.nps.sendStatements.bind(tinCan.nps), [statement]);\n  }\n\n  isAllowedStatement(statement: any) {\n    return this.settings.allowedVerbs.indexOf(statement.verb.display['en-US']) >= 0;\n  }\n\n  sendStorageStatements() {\n    const statements = storage.shift();\n\n    if (statements.length !== 0) {\n      while (statements.length) {\n        const statementsToSend = statements.splice(0, this.batchSize);\n        this.promises.push(\n          this.doSend(tinCan.lrs.sendStatements.bind(tinCan.lrs), statementsToSend)\n        );\n      }\n    }\n  }\n\n  doSend(send: any, data: any) {\n    return new Promise((resolve, reject) => {\n      send(data, (result: any) => {\n        if (result) {\n          const failedResult = result.find((e: any) => e.err !== null);\n          if (failedResult) {\n            reject(failedResult.err);\n          } else {\n            !lastRequestSuccess && eventEmitter.emit(events.APP_ONLINE);\n            lastRequestSuccess = true;\n            resolve();\n          }\n        }\n      });\n    }).catch(() => {\n      setTimeout(() => {\n        lastRequestSuccess && eventEmitter.emit(events.APP_OFFLINE_OR_SERVER_ERROR);\n        lastRequestSuccess = false;\n        this.doSend(send, data);\n      }, RETRY_DELAY_MILLISECONDS);\n    });\n  }\n}\n\nexport default new StatementSender();\n","import { events } from 'core/events/eventEmitter';\nimport EventHandler from './EventHandler';\nimport statementSender from '../statements/sender';\nexport default class LrsEventHandler extends EventHandler {\n  constructor() {\n    super({\n      sendStatement: statementSender.sendLrsStatement.bind(statementSender),\n      shouldHandlerErrors: true\n    });\n  }\n\n  initialize({ isScoringOfContentPagesAllowed }: any) {\n    this.handlers = [\n      { event: events.COURSE_STARTED, instance: this.createHandler('courseStarted') },\n      { event: events.COURSE_PROGRESSED, instance: this.createHandler('courseProgressed') },\n      { event: events.SECTION_PROGRESSED, instance: this.createHandler('sectionProgressed') },\n      { event: events.QUESTION_ANSWERED, instance: this.createHandler('questionAnswered') }\n    ];\n\n    if (isScoringOfContentPagesAllowed) {\n      this.handlers.push({\n        event: events.INFORMATION_CONTENT_EXPERIENCED,\n        instance: this.createHandler('informationContentExperienced')\n      });\n    }\n  }\n}\n","import { events } from 'core/events/eventEmitter';\nimport EventHandler from './EventHandler';\nimport statementSender from '../statements/sender';\nexport default class NpsEventHandler extends EventHandler {\n  constructor() {\n    super({ sendStatement: statementSender.sendNpsStatement.bind(statementSender) });\n  }\n\n  initialize() {\n    this.handlers = [\n      {\n        event: events.COURSE_EVALUATED,\n        instance: this.createHandler('courseEvaluated')\n      }\n    ];\n  }\n}\n","import tinCan from './tinCan';\nimport LrsEventHandler from './events/LrsEventHandler';\nimport NpsEventHandler from './events/NpsEventHandler';\nimport statementSender from './statements/sender';\nimport errorHandler, { errorToConsole } from './errors/errorHandler';\n\nclass XApi {\n  lrsEventHandler: any;\n  npsEventHandler: any;\n  settings: any;\n  defaultLrsUrl: any;\n  defaultNpsUrl: any;\n\n  constructor() {\n    this.lrsEventHandler = new LrsEventHandler();\n    this.npsEventHandler = new NpsEventHandler();\n  }\n\n  subscribeLrs() {\n    try {\n      tinCan.initializeLrs(this.settings.xApi, this.defaultLrsUrl);\n    } catch (e) {\n      this.unsubscribeLrs();\n      errorHandler(e);\n    }\n    this.lrsEventHandler.on();\n  }\n\n  subscribeNps() {\n    try {\n      tinCan.initializeNps(this.defaultNpsUrl);\n    } catch (e) {\n      this.unsubscribeNps();\n      errorToConsole(e);\n    }\n    this.npsEventHandler.on();\n  }\n\n  unsubscribeLrs() {\n    this.lrsEventHandler.off();\n  }\n\n  unsubscribeNps() {\n    this.npsEventHandler.off();\n  }\n\n  unsubscribeAll() {\n    this.unsubscribeLrs();\n    this.unsubscribeNps();\n  }\n\n  initialize({ settings, defaultLrsUrl, defaultNpsUrl, course, actor }: any) {\n    this.settings = settings;\n    this.defaultLrsUrl = defaultLrsUrl;\n    this.defaultNpsUrl = defaultNpsUrl;\n    this.lrsEventHandler.initialize(settings);\n    this.npsEventHandler.initialize();\n    tinCan.initialize({ course, actor });\n    statementSender.initialize(settings.xApi);\n  }\n}\n\nexport default new XApi();\n"],"sourceRoot":""}